import java.util.UUID
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.Files

def cloneGithubRepo(String repoUrl, String tempDirPath) {
    try {
        // Create a temporary directory for cloning
        def tempDir = new File(tempDirPath)
        tempDir.mkdirs()

        // Extract the repository name from the URL (assuming the URL is in the format "https://github.com/username/repo.git")
        def repoName = repoUrl.tokenize("/")[-1].replaceAll("\\.git\$", "")

        // Clone the repository using Git
        def gitCommand = ["git", "clone", repoUrl, "${tempDir}/${repoName}"]
        //def processBuilder = new ProcessBuilder(gitCommand)
        //processBuilder.directory(tempDir)
        //def process = processBuilder.start()

        // Wait for the Git clone process to finish
        def process = gitCommand.execute()
        def exitCode = process.waitFor()

        if (exitCode == 0) {
            System.out.println "Repository cloned successfully to: ${tempDir}/${repoName}"
        } else {
            System.out.println "Error cloning repository: ${exitCode}"
        }
    } catch (Exception e) {
        System.out.println "An error occurred: ${e.message}"
    }
}

def repoUrl = "https://github.com/nf-core/modules.git"

def generateUniqueAlphanumericString() {
    def uuid = UUID.randomUUID().toString()
    // Remove non-alphanumeric characters using a regular expression
    def alphanumericString = uuid.replaceAll("[^a-zA-Z0-9]", "")
    return alphanumericString
}

// Generate and print a unique alphanumeric string
def uniqueString = generateUniqueAlphanumericString().toString()
def tempDirPath = "$TMPDIR" + "/nfcore-" + uniqueString

cloneGithubRepo(repoUrl, tempDirPath.toString())

def addSymlink(source,symlink) {
    if (Files.isSymbolicLink(symlink)) {
        Files.delete(symlink)
        //System.out.println "Symlink unlinked successfully."
    }
    Files.createSymbolicLink(symlink, source)
}

def sourcePath_modules       = Paths.get(tempDirPath + "/modules/modules/nf-core/")
def symlinkPath_modules      = Paths.get("./modules/nf-core/")
addSymlink(sourcePath_modules,symlinkPath_modules)

def sourcePath_subworkflows  = Paths.get(tempDirPath + "/modules/subworkflows/nf-core/")
def symlinkPath_subworkflows = Paths.get("./subworkflows/nf-core/")
addSymlink(sourcePath_subworkflows,symlinkPath_subworkflows)


workflow.onComplete = {
    Files.delete(symlinkPath_modules)
    Files.delete(symlinkPath_subworkflows)
}

